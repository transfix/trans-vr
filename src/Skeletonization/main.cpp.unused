/*
  Copyright 2008 The University of Texas at Austin

        Authors: Samrat Goswami <samrat@ices.utexas.edu>
        Advisor: Chandrajit Bajaj <bajaj@cs.utexas.edu>

  This file is part of Skeletonization.

  Skeletonization is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License version 2.1 as published by the Free Software Foundation.

  Skeletonization is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/

// Samrat

#include <Skeletonization/datastruct.h>
#include <Skeletonization/init.h>
#include <Skeletonization/rcocone.h>
#include <Skeletonization/tcocone.h>
#include <Skeletonization/medax.h>
#include <Skeletonization/u1.h>
#include <Skeletonization/u2.h>
#include <Skeletonization/util.h>
#include <Skeletonization/robust_cc.h>
#include <Skeletonization/intersect.h>
#include <Skeletonization/hfn_util.h>
#include <Skeletonization/op.h>
#include <Skeletonization/graph.h>
#include <Skeletonization/skel.h>
// #include "helix.h"

// -----------------------------------------------------------------------
// Constants and global variables.
// -----------------------------------------------------------------------

// -- flatness marking ---
const double DEFAULT_ANGLE = M_PI / 8.0;      // Half of the co-cone angle. 
const double DEFAULT_SHARP = 2 * M_PI / 3.0;  // Angle of sharp edges.
const double DEFAULT_RATIO = 1.2 * 1.2;       // Squared thinness factor. 
const double DEFAULT_FLAT  = M_PI / 3.0;      // Angle for flatness Test

// -- robust cocone ---

const double DEFAULT_BIGBALL_RATIO  = (1./4.)*(1./4.);  // parameter to choose big balls.
const double DEFAULT_THETA_IF_d  = 5.0;       // parameter for infinite-finite deep intersection.
const double DEFAULT_THETA_FF_d  = 10.0;      // parameter for finite-finite deep intersection.

// -- medial axis ---

const double DEFAULT_MED_THETA = M_PI*22.5/180.0; // original: M_PI*22.5/180.0;
const double DEFAULT_MED_RATIO = 8.0*8.0; // original: 8.0*8.0;

// -- bounding box ---
const double BB_SCALE = 1.0;
vector<double> bounding_box;


// -----------------------------------------------------------------------
// main
// ----
// Parses the command line and initites the computation.
// -----------------------------------------------------------------------
int 
main( int argc, char **argv) {

  char shape_filename[90];
  char output_file_prefix[90];

  // robust cocone parameters.
  bool b_robust = false;
  double bb_ratio = DEFAULT_BIGBALL_RATIO;
  double theta_ff = M_PI/180.0*DEFAULT_THETA_FF_d;
  double theta_if = M_PI/180.0*DEFAULT_THETA_IF_d;

  double mr = 1.05*1.05;
  int helix_cnt = 20;

  // for flatness marking (in cocone)
  double flatness_ratio = DEFAULT_RATIO;
  double cocone_phi = DEFAULT_ANGLE;
  double flat_phi = DEFAULT_FLAT;
  
  //For medial axis
  double theta = DEFAULT_MED_THETA;
  double medial_ratio = DEFAULT_MED_RATIO;

  // For selection of big planar clusters.
  double threshold = 0.1;
  int pl_cnt = 2;
  bool discard_by_threshold = false;

  // Check commandline options.
  bool help = false;

  if(argc == 1)
     help = true;
  for (int i = 1; i < argc; i++) 
  {
    if ( argc < 3 ) 
    {
      help = true;
      break;
    }
    if ( (strcmp( "-h", argv[i]) == 0) || 
	 (strcmp( "-help", argv[i]) == 0)) {
      help = true;
      break;
    }
    else if (strcmp("-r", argv[i]) == 0)  
    {
      b_robust = true; //runs robust_cocone
    }
    else if ( strcmp( "-bbr", argv[i]) == 0) {
      ++i;
      if ( i >= argc) 
      {
	cerr << "Error: option -bbr requires "
	     << "a second argument." << endl;
	help = true;
      } 
      else
	bb_ratio = atof(argv[i]) * atof(argv[i]); // bounding box ratio argument for the robust_cocone function
    }
    else if ( strcmp( "-mr", argv[i]) == 0) {
      ++i;
      if ( i >= argc) 
      {
	cerr << "Error: option -mr requires "
	     << "a second argument." << endl;
	help = true;
      } 
      else
	mr = atof(argv[i])*atof(argv[i]); // mr is not being used
    }
    else if ( strcmp( "-hc", argv[i]) == 0) {
      ++i;
      if ( i >= argc) 
      {
	cerr << "Error: option -hc requires "
	     << "a second argument." << endl;
	help = true;
      } 
      else
	helix_cnt = atoi(argv[i]); // helix count, don't see it being used
    }
    else if ( strcmp( "-thif", argv[i]) == 0) {
      ++i;
      if ( i >= argc) 
      {
	cerr << "Error: option -thif requires "
	     << "a second argument." << endl;
	help = true;
      } 
      else
	theta_if = M_PI/180.*atof(argv[i]); //argument for robust cocone
    }
    else if ( strcmp( "-thff", argv[i]) == 0) {
      ++i;
      if ( i >= argc) 
      {
	cerr << "Error: option -thff requires "
	     << "a second argument." << endl;
	help = true;
      } 
      else
	theta_ff = M_PI/180.*atof(argv[i]); //another argument for robust cocone
    }
    else if ( strcmp( "-plc", argv[i]) == 0) {
      ++i; discard_by_threshold = false;
      if ( i >= argc) 
      {
	cerr << "Error: option -plc requires "
	     << "a second argument." << endl;
	help = true;
      } 
      else
	pl_cnt = atoi(argv[i]); //used in filters_small_clusters as argument
    }

    else if (strcmp("-medth", argv[i]) == 0){
      ++i;
      if (i >= argc)
	{
	  cerr << "Error: option -medth requires "
	       << "a second argument." << endl;
	  help = true;
	}
      else
	theta = atof(argv[i]);
    }
    
    else if (strcmp("-medr", argv[i]) == 00) {
	++i; 
	if (i >= argc)
	{
	  cerr << "Error: option -medr requires "
	       << "a second argument." << endl;
	  help = true;
	}
      else
	medial_ratio =atof(argv[i]);
      }


    else if ( i+1 >= argc) {
      help = true;
    } 
    else 
    {
       strcpy(shape_filename, argv[i]);
       strcpy(output_file_prefix, argv[i+1]);
       i++;
    }
  }

  if ( help) {
    cerr << "Usage: " << argv[0] 
	 << " <infile> <outfile>" << endl;
    exit( 1);
  }

  cerr << endl << "Shape name : " << shape_filename << endl << endl;
  
  CGAL::Timer timer;

  int cnt =0;
  Triangulation triang;
  timer.start();

  if (b_robust)
  {
     ifstream fin;
     fin.open(shape_filename);
     // Build the triangulation data structure.
     cerr << "DT 1 " << flush;  
     istream_iterator<double> input( fin);
     istream_iterator<double> beyond;
     while ( input != beyond) {
       double x = *input; 
       ++input;
       if ( input == beyond) {
         cerr << "Error: inconsistent triangulation file." << endl;
	   exit( 1);
       }
       double y = *input; 
       ++input;
       if ( input == beyond) {
         cerr << "Error: inconsistent triangulation file." << endl;
         exit( 1);
       }
       double z = *input; 
       ++input;
       cnt++;
       if(cnt >= 1000){
         cerr<<"." << flush;
         cnt = 0;
       }
       Triangulation::Point p = Point( x, y, z);
       triang.insert( p);
     }
     fin.close();
     cerr << ". done." << endl;
     cerr << "Time : " << timer.time() <<" sec(s)."<< endl <<endl;
   
     timer.reset();
   
     // Initialization
     cerr << "Init 1 ";
     initialize(triang);
     cerr << ".";
     // Computation of voronoi vertex and cell radius.
     compute_voronoi_vertex_and_cell_radius(triang);
     cerr << ". done." << endl;
     cerr << "Time : " << timer.time() << endl << endl; 
     timer.reset();
   
     cerr << "RC ";
     robust_cocone(bb_ratio, theta_ff, theta_if, triang, output_file_prefix);
     cerr << " done." << endl;
     cerr << "Time : " << timer.time() << endl << endl; 
     timer.reset();

#ifdef DEBUG_OP
  write_iobdy(triang, output_file_prefix);
#endif

     // Create a new triangulation from the pointset taken 
     // from "output_file_prefix.tcip".
     // Delete the earlier triangulation.
     triang.clear();
  }

  char robust_shape_filename[100];

  if (b_robust)
     strcat(strcpy(robust_shape_filename,output_file_prefix),".tcip");
  else 
     strcpy(robust_shape_filename, shape_filename);

  ifstream robust_fin;
  robust_fin.open(robust_shape_filename);

  if(! robust_fin)
  {
     cerr << "Cannot open the file " << robust_shape_filename 
	  << " for reading. " << endl;
     exit(1);
  }

  cerr << "DT 2 ";

  // Maintain the min-max span of the pointset in 3 directions.
  double x_min = DBL_MAX, x_max = -DBL_MAX,
         y_min = DBL_MAX, y_max = -DBL_MAX,
         z_min = DBL_MAX, z_max = -DBL_MAX;

  istream_iterator<double> r_input(robust_fin);
  istream_iterator<double> r_beyond;

  int total_pt_cnt = 0;

  while ( r_input != r_beyond) {
      double x = *r_input; 
      ++r_input;
      if ( r_input == r_beyond) {
         cerr << "Error: inconsistent triangulation file." << endl;
         exit( 1);
      }
      double y = *r_input; 
      ++r_input;
      if ( r_input == r_beyond) {
         cerr << "Error: inconsistent triangulation file." << endl;
         exit( 1);
      }
      double z = *r_input; 
      ++r_input;
      cnt++;
      total_pt_cnt ++;
      if(cnt >= 1000){
         cerr<<"." << flush;
         cnt = 0;
      }

      Vertex_handle new_vh = triang.insert( Point(x,y,z) );
      // check x-span
      if(CGAL::to_double(new_vh->point().x()) < x_min) 
         x_min = CGAL::to_double(new_vh->point().x());
      if(CGAL::to_double(new_vh->point().x()) > x_max) 
         x_max = CGAL::to_double(new_vh->point().x());
      // check y-span
      if(CGAL::to_double(new_vh->point().y()) < y_min) 
         y_min = CGAL::to_double(new_vh->point().y());
      if(CGAL::to_double(new_vh->point().y()) > y_max) 
         y_max = CGAL::to_double(new_vh->point().y());
      // check z-span
      if(CGAL::to_double(new_vh->point().z()) < z_min) 
         z_min = CGAL::to_double(new_vh->point().z());
      if(CGAL::to_double(new_vh->point().z()) > z_max) 
         z_max = CGAL::to_double(new_vh->point().z());
  }
  cerr << " done." << endl;

  cerr << "Total point count: " << total_pt_cnt << endl;
  cerr << "Del Time : " << timer.time() << endl << endl; 
  timer.reset();

  robust_fin.close();

  // Bounding box of the point set.
  bounding_box.push_back(x_min - BB_SCALE*(x_max-x_min));
  bounding_box.push_back(x_max + BB_SCALE*(x_max-x_min));

  bounding_box.push_back(y_min - BB_SCALE*(y_max-y_min));
  bounding_box.push_back(y_max + BB_SCALE*(y_max-y_min));

  bounding_box.push_back(z_min - BB_SCALE*(z_max-z_min));
  bounding_box.push_back(z_max + BB_SCALE*(z_max-z_min));

  // ------------------------------------------
  // Initialization of all the required fields
  // needed for Tight Cocone 
  // ------------------------------------------
  cerr << "Init 2 ";
  initialize(triang);
  cerr << ".";

  // compute voronoi vertex
  compute_voronoi_vertex_and_cell_radius(triang);
  cerr << ". done." << endl;
  cerr << "Time : " << timer.time() << endl << endl; 
  timer.reset();
  // ------------ End Intialization -------------
  
  // ------------------------------------------
  // Surface Reconstruction using Tight Cocone
  // ------------------------------------------
  cerr << "TC ";
  tcocone(cocone_phi, DEFAULT_SHARP, flat_phi, flatness_ratio, triang);
  cerr << " done." << endl;
  cerr << "Time : " << timer.time() << endl << endl;
  timer.reset();
  // write the water-tight surface.
  write_wt(triang, output_file_prefix);

  // Medial Axis
  timer.reset();
  cerr << "Medial axis " << flush;
#ifdef NO_TIGHTCOCONE
  compute_poles( triang );
  mark_flat_vertices( triang, flatness_ratio, cocone_phi, flat_phi);
#endif
  compute_medial_axis(triang, theta, medial_ratio);
  cerr << " done." << endl;
  cerr << "TIME: "<<timer.time()<<" sec(s)." << endl << endl;  
  timer.reset();

#ifdef DEBUG_OP
  // writing the medial axis in OFF format.
  write_axis(triang, output_file_prefix);
#endif

  // build skeleton from u1 and u2.
  // skeleton has two parts - planar and linear.
  cerr << "Skeleton building starts." << endl << endl;
  Skel skel = Skel();
  
  cerr << "\tU1";
  compute_u1(triang, output_file_prefix);
  cerr << " done." << endl;
#ifdef DEBUG_OP
  // write_u1(triang, output_file_prefix);
#endif
  // cluster planar patches, compute area and center.
  cerr << "\tProcessing planar patches";
  cluster_planar_patches(triang, skel);
  cerr << " done." << endl;
  cerr << "\tTIME: "<<timer.time()<<" sec(s)." << endl << endl;  
  timer.reset();

  cerr << "\tU2";
  Graph graph; 
  compute_u2(triang, graph, output_file_prefix);
  cerr << " done." << endl;
#ifdef DEBUG_OP
  // write_u2(triang, graph, output_file_prefix);
#endif
  // organize the linear portion into a network of polylines.
  cerr << "\tPorting Graph to Skel ";
  port_graph_to_skel(graph, skel);
  cerr << " done." << endl;
  cerr << "\tTIME: "<<timer.time()<<" sec(s)." << endl << endl;  
  timer.stop();

  cerr << "\tRemoval of small flat components ";
  // sort and star the clusters.
  // sorting is done by area.
  star(triang, graph, skel);
  cerr << ".";
  sort_cluster_by_area(skel);
  cerr << ".";
  filter_small_clusters(skel, pl_cnt, threshold, discard_by_threshold); 
  cerr << ".";
  cerr << " done." << endl;
  cerr << "Skeleton building ends." << endl << endl;

  write_skel(skel, output_file_prefix);

  // Selection of Alpha Helix and Beta Sheet Candidates.
  cerr << "Helix candidate selection ";
  vector<Point> alpha_helix_cand;
  for(int i = 0; i < (int)skel.L.size(); i ++)
  {
     if( skel.L_invalid[i] ) continue;
     for(int j = 0; j < (int)skel.L[i].cell_list.size(); j ++)
     {
        Cell_handle c = skel.L[i].cell_list[j];
        if( c->big_pl() ) continue;
        if( sqrt(c->cell_radius()) < 1 ||
            sqrt(c->cell_radius()) > 4 )
           continue;
        alpha_helix_cand.push_back(c->voronoi());
     }
  }
  cerr << "done." << endl;
  // write the candidates in a file.
  string s (output_file_prefix);
  s += ".HELIX_cand";
  ofstream fout;
  fout.open(s.c_str());
  for(int i = 0; i < (int)alpha_helix_cand.size(); i ++)
     fout << alpha_helix_cand[i] << endl;

  

  return 0;
}
