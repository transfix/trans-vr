/*
  Copyright 2002-2003 The University of Texas at Austin
  
    Authors: Anthony Thane <thanea@ices.utexas.edu>
             Vinay Siddavanahalli <skvinay@cs.utexas.edu>
    Advisor: Chandrajit Bajaj <bajaj@cs.utexas.edu>

  This file is part of Volume Rover.

  Volume Rover is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  Volume Rover is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with iotree; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

// MouseEvent3D.cpp: implementation of the MouseEvent3D class.
//
//////////////////////////////////////////////////////////////////////

#include <VolumeWidget/MouseEvent3D.h>
#include "OpenGLViewer.h"
//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

MouseEvent3D::MouseEvent3D(const QMouseEvent& qmouseevent, const View& view, const Grid& grid, OpenGLViewer *ptrOpenGLViewer)
{
	Ray ray = view.GetPickRay(qmouseevent.x(), qmouseevent.y());
	m_WorldPos = grid.Intersect(ray);
	if (m_WorldPos.isBad()) {
		m_OnGrid = false;
	}
	else {
		m_OnGrid = true;
	}
	m_Pos = qmouseevent.pos();
	m_GlobalPos = qmouseevent.globalPos();
	m_Button = qmouseevent.button();
	m_State = qmouseevent.state();
	m_StateAfter = qmouseevent.stateAfter();
	m_Accept = qmouseevent.isAccepted();
	m_ptrOpenGLViewer = ptrOpenGLViewer;
	m_Ray = ray;
}

MouseEvent3D::~MouseEvent3D()
{

}

const QPoint& MouseEvent3D::pos()const
{
	return m_Pos;
}

const QPoint& MouseEvent3D::globalPos() const
{
	return m_GlobalPos;
}

int MouseEvent3D::x()const
{
	return m_Pos.x();
}

int MouseEvent3D::y()const
{
	return m_Pos.y();
}

int MouseEvent3D::globalX() const
{
	return m_GlobalPos.x();
}

int MouseEvent3D::globalY() const
{
	return m_GlobalPos.y();
}


const Vector& MouseEvent3D::worldPos() const
{
	return m_WorldPos;
}

float MouseEvent3D::worldX() const
{
	return m_WorldPos[0];
}

float MouseEvent3D::worldY() const
{
	return m_WorldPos[1];
}

float MouseEvent3D::worldZ() const
{
	return m_WorldPos[2];
}

Ray MouseEvent3D::ray() const
{
	return m_Ray;
}

Qt::ButtonState MouseEvent3D::button() const
{
	return m_Button;
}

Qt::ButtonState MouseEvent3D::state() const
{
	return m_State;
}

Qt::ButtonState MouseEvent3D::stateAfter() const
{
	return m_StateAfter;
}

bool MouseEvent3D::isAccepted() const
{
	return m_Accept;
}

bool MouseEvent3D::isOnGrid() const
{
	return m_OnGrid;
}

void MouseEvent3D::accept()
{
	m_Accept = true;
}

void MouseEvent3D::ignore()
{
	m_Accept = false;
}

OpenGLViewer* MouseEvent3D::getOpenGLViewer()
{
	return m_ptrOpenGLViewer;
}
