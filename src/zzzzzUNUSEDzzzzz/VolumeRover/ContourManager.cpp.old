// ContourManager.cpp: implementation of the ContourManager class.
//
//////////////////////////////////////////////////////////////////////

#include <VolumeRover/ContourManager.h>
#include <SceneArrayNode.h>
#include <GeometryScene.h>

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

ContourManager::ContourManager()
{
	m_ConDataset = 0;
}

ContourManager::~ContourManager()
{
	deleteDataset();
}

void ContourManager::setData(unsigned char* data, int dimX, int dimY, int dimZ, double aspectX, double aspectY, double aspectZ)
{
	deleteDataset();
	int dims[] = {dimX, dimY, dimZ};
	m_ConDataset = newDatasetReg(CONTOUR_UCHAR, CONTOUR_REG_3D, 1, 1, dims, (unsigned char*) data);
	m_DimX = dimX;
	m_DimY = dimY;
	m_DimZ = dimZ;
	m_AspectX = aspectX;
	m_AspectY = aspectY;
	m_AspectZ = aspectZ;
}


static inline float maxOfThree(float n1, float n2, float n3) {
	float max = (n1>n2?n1:n2);
	return (max>n3?max:n3);
}

void ContourManager::prepareContour(OpenGLViewer* viewer, double isovalue)
{
	if (m_ConDataset) {
		Contour3dData* c3dData = getContour3d(m_ConDataset, 0, 0, (float)isovalue, 0);

		if (c3dData) {

			GeometryScene* scene = viewer->getGeometryScene();
			SceneArrayNode* node = scene->getIth(0);
			if (!node) {
				node = new SceneArrayNode;
				scene->add(node);
				node->getGeometry()->AllocateTris(c3dData->nvert,c3dData->ntri);
			}
			else {
				node->getGeometry()->AllocateTris(c3dData->nvert,c3dData->ntri);
			}
			int c;
			for (c=0; c<c3dData->ntri; c++) {
				node->getGeometry()->m_Tris[c*3+0] = c3dData->tri[c][0];
				node->getGeometry()->m_Tris[c*3+1] = c3dData->tri[c][1];
				node->getGeometry()->m_Tris[c*3+2] = c3dData->tri[c][2];
			}
			double maxAspect = maxOfThree(m_AspectX, m_AspectY, m_AspectZ);
			double aspectX = m_AspectX/maxAspect;
			double aspectY = m_AspectY/maxAspect;
			double aspectZ = m_AspectZ/maxAspect;
			for (c=0; c<c3dData->nvert; c++) {
				node->getGeometry()->m_TriVerts[c*3+0] = (c3dData->vert[c][0]/(m_DimX-1.0)-0.5)*aspectX;
				node->getGeometry()->m_TriVerts[c*3+1] = (c3dData->vert[c][1]/(m_DimY-1.0)-0.5)*aspectY;
				node->getGeometry()->m_TriVerts[c*3+2] = (c3dData->vert[c][2]/(m_DimZ-1.0)-0.5)*aspectZ;
				node->getGeometry()->m_TriVertNormals[c*3+0] = (c3dData->vnorm[c][0])*(m_DimX-1.0)/aspectX;
				node->getGeometry()->m_TriVertNormals[c*3+1] = (c3dData->vnorm[c][1])*(m_DimY-1.0)/aspectY;
				node->getGeometry()->m_TriVertNormals[c*3+2] = (c3dData->vnorm[c][2])*(m_DimZ-1.0)/aspectZ;
			}
			node->getGeometry()->SetTriNormalsReady();

		}
	}
}

void ContourManager::deleteDataset()
{
	if (m_ConDataset) {
		clearDataset(m_ConDataset);
		m_ConDataset = 0;
	}
}

