/*
  Copyright 2002-2003 The University of Texas at Austin
  
	Authors: Anthony Thane <thanea@ices.utexas.edu>
	Advisor: Chandrajit Bajaj <bajaj@cs.utexas.edu>

  This file is part of Volume Rover.

  Volume Rover is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  Volume Rover is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with iotree; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

// IPolyRenderable.cpp: implementation of the IPolyRenderable class.
//
//////////////////////////////////////////////////////////////////////

#include <VolumeRover/IPolyRenderable.h>
#include <stdio.h>
#include "../ipoly/src/ipolyutil.h"
#include <cvcraw_geometry/Geometry.h>

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

IPolyRenderable::IPolyRenderable() :
m_GeometryRenderable(new Geometry(), true)
{
	m_iPoly = IPolyNew();
}

IPolyRenderable::IPolyRenderable(const Geometry& geometry) :
m_GeometryRenderable(new Geometry(geometry), true)
{
	m_iPoly = IPolyNew();
	IPolyCntl* cp = IPolyBegin(m_iPoly, IPOLY_DEFAULT);

	IPolyInitVerts(cp, geometry.m_NumTriVerts, IPolyNormsYes, IPolySizesNo, NoColor);
	unsigned int c;
	double point[3]; 
	float norm[3];
	for (c=0; c<geometry.m_NumTriVerts; c++) {
		point[0] = geometry.m_TriVerts[c*3+0];
		point[1] = geometry.m_TriVerts[c*3+1];
		point[2] = geometry.m_TriVerts[c*3+2];
		norm[0] = geometry.m_TriVertNormals[c*3+0];
		norm[1] = geometry.m_TriVertNormals[c*3+1];
		norm[2] = geometry.m_TriVertNormals[c*3+2];
		IPolyAddVert(cp, point, norm, IPolyNullSize, IPolyNullColor, IPolyNullValue);
	}
	IPolyInitFaces(cp, geometry.m_NumTris, IPolySizesNo, NoColor);
	int verts[3];
	for (c=0; c<geometry.m_NumTris; c++) {
		verts[0] = geometry.m_Tris[c*3+0];
		verts[1] = geometry.m_Tris[c*3+1];
		verts[2] = geometry.m_Tris[c*3+2];
		IPolyAddFaceVerts(cp, 3, verts, IPolyNullSize, IPolyNullColor, IPolyNullValue);
	}

	IPolyEnd(cp);
}

IPolyRenderable::IPolyRenderable(iPoly* ipoly) :
m_GeometryRenderable(new Geometry(), true)
{
	m_iPoly = ipoly;
}

IPolyRenderable::~IPolyRenderable()
{
	IPolyFree(m_iPoly);
}

bool IPolyRenderable::render()
{
	return m_GeometryRenderable.render();
}

bool IPolyRenderable::loadFile(const char* name)
{
	FILE* fp = fopen(name, "r");
	if (fp) {
		IPolyRead(fp, m_iPoly, IPOLY_DEFAULT);
		copyiPolyToGeometry();
		fclose(fp);
		return true;
	}
	else {
		return false;
	}
}

bool IPolyRenderable::saveFile(const char* name)
{
	FILE* fp = fopen(name, "w");
	if (fp) {
		IPolyWrite(fp, m_iPoly, IPolyNormsYes, IPolyEdgesNo,IPolyColorsNo,IPolyEGroupsNo, IPolyFGroupsNo);
		fclose(fp);
		return true;
	}
	else {
		return false;
	}
}

void IPolyRenderable::copyiPolyToGeometry()
{
	IPolyTriang(m_iPoly);
	Geometry* geometry = m_GeometryRenderable.getGeometry();
	unsigned int t = IPolyNFaces(m_iPoly), v = IPolyNVerts(m_iPoly);
	geometry->AllocateTris(v,t);
	unsigned int c;
	for (c=0; c<v; c++) {
		geometry->m_TriVerts[c*3+0] = (float)IPolyVert(m_iPoly, c)[0];
		geometry->m_TriVerts[c*3+1] = (float)IPolyVert(m_iPoly, c)[1];
		geometry->m_TriVerts[c*3+2] = (float)IPolyVert(m_iPoly, c)[2];
		geometry->m_TriVertNormals[c*3+0] = (float)IPolyVertNorm(m_iPoly, c)[0];
		geometry->m_TriVertNormals[c*3+1] = (float)IPolyVertNorm(m_iPoly, c)[1];
		geometry->m_TriVertNormals[c*3+2] = (float)IPolyVertNorm(m_iPoly, c)[2];
	}
	for (c=0; c<t; c++) {
		geometry->m_Tris[c*3+0] = IPolyFaceVert(m_iPoly,c,0);
		geometry->m_Tris[c*3+1] = IPolyFaceVert(m_iPoly,c,1);
		geometry->m_Tris[c*3+2] = IPolyFaceVert(m_iPoly,c,2);
	}
}

